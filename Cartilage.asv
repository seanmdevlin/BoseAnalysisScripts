function Cartilage()

%% Import *.csv files from this folder
% are there previous Imports?
if exist('Data.mat','file') == 2
    load('Data.mat')
else
    %  Look for CSV files in this directory.
    files = ls('*.CSV');
    n = size(files,1); % # files found
    %  For each file found...
    h = waitbar(0,['Importing .CSV files... 0/',num2str(n,'%u')]);
    for i = 1:n
        DataType  = regexpi(files(i,:),'(TD)|(PV)','tokens');
            % Time-Delay (Equilibrium Stiffness)
            IsEq   = strcmp(cell2mat(DataType{:}),'TD');
            % Peak-Valley (Dynamic Stiffness)
            IsDyn  = strcmp(cell2mat(DataType{:}),'PV');
        % Import each data field as a singular structure
        if IsEq
            Data{i} = ImportEqFile(files(i,:));
            Data{i}.Type.Eq  = IsEq;
            Data{i}.Type.Dyn = false;
        elseif IsDyn
            Data{i} = ImportDynFile(files(i,:));
            Data{i}.Type.Dyn = IsDyn;
            Data{i}.Type.Eq  = false;
        else
            Data{i} = [];
            continue
        end
        % Parse the name for important info
        SampleNum = regexpi(Data{i}.Name,'Samp[ _-L]*(\d{1,})','tokens');
            Data{i}.SampleNum = str2double(cell2mat(SampleNum{:}));
        Thickness = regexpi(Data{i}.Name,'t\s*(\d{1,}|\d{1,}[.]\d{1,})','tokens');
            Data{i}.Thickness = str2double(cell2mat(Thickness{:}));
        Diameter  = regexpi(Data{i}.Name,'d\s*(\d{1,}|\d{1,}[.]\d{1,})','tokens');
            Data{i}.Diameter  = str2double(cell2mat(Diameter{:}));
        Location  = regexpi(Data{i}.Name,'loc(\d*)','tokens');
            Data{i}.Location  = str2double(cell2mat(Location{:}));
        DateMDY    = regexpi(Data{i}.Name,'\d{4,4}[ _-]\d{2,2}[ _-]\d{2,2}','match');
            Data{i}.Date.Month= str2double(DateMDY{:}(6:7));
            Data{i}.Date.Day  = str2double(DateMDY{:}(9:10));
            Data{i}.Date.Year = str2double(DateMDY{:}(1:4));
%         LoadBearing= regexpi(Data{i}.Name,...\
%             '(non?[ _-]*)load[ _-]*bearing|load[ _-]*bearing','match');
        LoadBearing= regexpi(Data{i}.Name,'(no?[ _-]*)load|load','match');
            if ~isempty(LoadBearing)
                if ~isempty(regexpi(LoadBearing,'no','match'))
                    Data{i}.LoadBearing = false;
                else
                    Data{i}.LoadBearing = true;
                end
            else
                Data{i}.LoadBearing = NaN;
            end
        waitbar(i/n,h,['Importing .CSV files... ', ...
            num2str(i,'%u'),'/',num2str(n,'%u')])
    end
    save('Data.mat','Data');
    close(h)
    clear files i
end

%% Process data
allSamples = zeros(length(Data),1);
for samples = 1:length(Data)
    % Remember sample numbers
    allSamples(samples) = Data{1,samples}.SampleNum;
    %% Convert Stress in SI units
    Force.kg = Data{samples}.Force_g ./ 1000;
    Force.N  = Force.kg .* 9.8;
    Diameter.m = Data{samples}.Diameter ./ 1000;
    Area.m2 = (pi/4) .* ( Diameter.m .^ 2 );
    Stress.Pa = -( Force.N ) ./ ( Area.m2 );
    % Calculate strain in percent
    Strain.ratio = -( Data{samples}.Disp_mm ./ Data{samples}.Thickness );
    % Time
    Time.sec = Data{samples}.ElapsedTime_sec;
    if Data{1,samples}.Type.Eq
        %% Determine strain steps [0,5,7.5,10,12.5,15%]
        Strain.roundedRatio = 0.025 .* round(Strain.ratio ./ 0.025);
        Strain.Steps = unique(Strain.roundedRatio);
        for n = 1:length(Strain.Steps)
            % Calculate Stress Relaxation
            Strain.mask = Strain.Steps(n) == Strain.roundedRatio;
            Time.Now = Time.sec(Strain.mask);
            Time.Length = max(Time.Now)-min(Time.Now);
            Stress.Now = Stress.Pa(Strain.mask);
            [~,maxStressInd] = max(Stress.Now);
            xData = Time.Now(maxStressInd:end) - Time.Now(maxStressInd);
            yData = Stress.Now(maxStressInd:end);
            [Data{1,samples}.Eq.Stress(n).fitresult,    ...
             Data{1,samples}.Eq.Stress(n).gof       ] = ...
                StressEqFit(xData, yData);
            Data{1,samples}.Eq.Results.Stress(n) = ...
                Data{1,samples}.Eq.Stress(n).fitresult.c;
            % Calculate Mean Strain at step
            Strain.Now = Strain.ratio(Strain.mask);
            Data{1,samples}.Eq.Results.Strain(n) = ...
                mean(Strain.Now(maxStressInd:end));
        end
        % Calculate Equilibrium Stiffness
        xData = [Data{1,samples}.Eq.Results.Strain];
        yData = [Data{1,samples}.Eq.Results.Stress];
        [Data{1,samples}.Eq.fitresult, Data{1,samples}.Eq.gof] = StiffnessFit(xData, yData, Data{1,samples});
        Data{1,samples}.Modulus.Eq = Data{1,samples}.Eq.fitresult.p1;
    elseif Data{1,samples}.Type.Dyn
        %% Dynamic Modulus
        Strain.filter = abs(Strain.ratio-repmat(mode(Strain.ratio),size(Strain.ratio,1),1)) < ...
            repmat(std(Strain.ratio),size(Strain.ratio,1),1);
        Strain.filter = Strain.filter(:,1) & Strain.
        DynModulus = diff(Stress.Pa(Strain.filter),1,2) ./ ...
            diff(Strain.ratio(Strain.filter),1,2);
        allCounts = unique(Data{1,samples}.Counts);
        allTimes  = unique(Data{1,samples}.ElapsedTime_sec);
        
        allDynMod = zeros(size(allCounts));
        for i = 1:length(allCounts)
            allDynMod(i,1) = mean( ...
                DynModulus( Data{1,samples}.Counts == allCounts(i) ) );
        end
        
        allFreqs = round(diff(allCounts)./diff(allTimes)./0.01).*0.01;
            Data{1,samples}.nFreqs = unique(allFreqs);
                nFreqs = Data{1,samples}.nFreqs;
            Data{1,samples}.nDynMod = NaN(size(Data{1,samples}.nFreqs));
        for i = 1:length(Data{1,samples}.nFreqs)
            Data{1,samples}.nDynMod(i,1) = mean( allDynMod( allFreqs == Data{1,samples}.nFreqs(i) ) );
        end
    end
end

% Create figure
figure1 = figure;

% Create axes

axes1 = subplot(2,4,[1,5],'Parent',figure1,'YScale','log');
hold(axes1,'on');

axes2 = subplot(2,4,[2,3,4,6,7,8],'Parent',figure1,'YScale','log','XScale','log');
hold(axes2,'on');

for i = 1:length(Data)
    if Data{1,i}.Type.Eq
        % Create scatter
        subplot(2,4,[1,5])
        plot(axes1,0,Data{1,i}.Modulus.Eq,'Marker','o','Color',[1 0 0])
    elseif Data{1,i}.Type.Dyn
        % Create loglog
        subplot(2,4,[2,3,4,6,7,8])
        loglog(axes2, Data{1,i}.nFreqs, Data{1,i}.nDynMod, ...
            'DisplayName','Non-Load-Bearing Cartilage (Loc2)', ...
            'Marker','o', 'LineWidth',4, 'Color',[1 0 0]);
    end
end

keyboard
end

function Data = ImportEqFile(filename, startRow, endRow)
%IMPORTFILE1 Import numeric data from a text file as column vectors.
%   [POINTS,ELAPSEDTIME,SCANTIME,DISP,VARNAME5,STRAIN] =
%   IMPORTFILE1(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [POINTS,ELAPSEDTIME,SCANTIME,DISP,VARNAME5,STRAIN] =
%   IMPORTFILE1(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [Points,ElapsedTime,ScanTime,Disp,VarName5,Strain] =
%   importfile1('Farzad_02-17-2015_t2.84_d4.96.CSV',14, 42523);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2015/02/25 16:30:46

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 14;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
textscan(fileID, '%[^\n\r]', startRow(1)-1, 'ReturnOnError', false);
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    textscan(fileID, '%[^\n\r]', startRow(block)-1, 'ReturnOnError', false);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Exclude rows with non-numeric cells
J = ~all(cellfun(@(x) (isnumeric(x) || islogical(x)) && ~isnan(x),raw),2); % Find rows with non-numeric cells
raw(J,:) = [];

%% Allocate imported array to column variable names
Data.Points = cell2mat(raw(:, 1));
Data.ElapsedTime_sec = cell2mat(raw(:, 2));
Data.ScanTime_sec = cell2mat(raw(:, 3));
Data.Disp_mm = cell2mat(raw(:, 4));
Data.Force_g = cell2mat(raw(:, 5));
Data.Strain_pc = cell2mat(raw(:, 6));
Data.Name = filename;
end
function Data = ImportDynFile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [ELAPSETIME,COUNTS,DISP,DISP1,VARNAME5,VARNAME6,STRAIN,STRAIN1] =
%   IMPORTFILE(FILENAME) Reads data from text file FILENAME for the default
%   selection.
%
%   [ELAPSETIME,COUNTS,DISP,DISP1,VARNAME5,VARNAME6,STRAIN,STRAIN1] =
%   IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [ElapseTime,Counts,Disp,Disp1,VarName5,VarName6,Strain,Strain1] =
%   importfile('Sample1_Dyn_non-load-bearing-loc2-030415-d5.9-t4.29 part
%   2.CSV',13, 4886);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2015/03/05 23:44:58

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 13;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
textscan(fileID, '%[^\n\r]', startRow(1)-1, 'ReturnOnError', false);
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    textscan(fileID, '%[^\n\r]', startRow(block)-1, 'ReturnOnError', false);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Exclude rows with non-numeric cells
I = ~all(cellfun(@(x) (isnumeric(x) || islogical(x)) && ~isnan(x),raw),2); % Find rows with non-numeric cells
raw(I,:) = [];

%% Allocate imported array to column variable names
Data.ElapsedTime_sec = cell2mat(raw(:, 1));
Data.Counts = cell2mat(raw(:, 2));
Data.Disp_mm(:,1) = cell2mat(raw(:, 3));
Data.Disp_mm(:,2) = cell2mat(raw(:, 4));
Data.Force_g(:,1) = cell2mat(raw(:, 5));
Data.Force_g(:,2) = cell2mat(raw(:, 6));
Data.Strain_perc(:,1) = cell2mat(raw(:, 7));
Data.Strain_perc(:,2) = cell2mat(raw(:, 8));
Data.Name = filename;
end

function [fitresult, gof] = StressEqFit(x, y)
%CREATEFIT(X,Y)
%  Create a fit.
%
%  Data for 'untitled fit 1' fit:
%      X Input : x
%      Y Output: y
%  Output:
%      fitresult : a fit object representing the fit.
%      gof : structure with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 25-Feb-2015 17:33:14


%% Fit: 'untitled fit 1'.
[xData, yData] = prepareCurveData( x, y );

% Set up fittype and options.
ft = fittype( 'a*exp(-(b*x)^n)+c', 'independent', 'x', 'dependent', 'y' );
opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
opts.Display = 'Off';
opts.Lower = [0 0 0 -1];
opts.Robust = 'Bisquare';
opts.StartPoint = [1000000 1 1000 1];
opts.Upper = [100000000 10 100000 10];

% Fit model to data.
[fitresult, gof] = fit( xData, yData, ft, opts );

% % Plot fit with data.
% figure( 'Name', 'untitled fit 1' );
% h = plot( fitresult, xData, yData );
% legend( h, 'y vs. x', 'untitled fit 1', 'Location', 'NorthEast' );
% % Label axes
% xlabel( 'x' );
% ylabel( 'y' );
% grid on
end
function [fitresult, gof] = StrainEqFit(x, y)
%CREATEFIT(X,Y)
%  Create a fit.
%
%  Data for 'untitled fit 1' fit:
%      X Input : x
%      Y Output: y
%  Output:
%      fitresult : a fit object representing the fit.
%      gof : structure with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 25-Feb-2015 17:39:01


%% Fit: 'untitled fit 1'.
[xData, yData] = prepareCurveData( x, y );

% Set up fittype and options.
ft = fittype( 'poly1' );

% Fit model to data.
[fitresult, gof] = fit( xData, yData, ft );

% % Plot fit with data.
% figure( 'Name', 'untitled fit 1' );
% h = plot( fitresult, xData, yData );
% legend( h, 'y vs. x', 'untitled fit 1', 'Location', 'NorthEast' );
% % Label axes
% xlabel( 'x' );
% ylabel( 'y' );
% grid on
end

function [fitresult, gof] = StiffnessFit(xData, yData, Data)
%CREATEFIT(XDATA,YDATA)
%  Create a fit.
%
%  Data for 'untitled fit 1' fit:
%      X Input : xData
%      Y Output: yData
%  Output:
%      fitresult : a fit object representing the fit.
%      gof : structure with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 02-Mar-2015 17:47:26


%% Fit: 'untitled fit 1'.
[xData1, yData1] = prepareCurveData( xData, yData );

% Set up fittype and options.
ft = fittype( 'poly1' );

% Fit model to data..

[fitresult, gof] = fit( xData1, yData1, ft );
[fitresult1, ~] = fit( xData1.*100, yData1./(1E6), ft );

% Plot fit with data.
f = figure( 'Name', Data.Name );
h = plot( fitresult1, xData1.*100, yData1./(1E6) );
legend( h, ['Stiffness: ', num2str(fitresult.p1/1000,'%u'), ' kPa'], ...
    ['r^2: ',num2str(gof.rsquare)], 'Location', 'NorthWest' );
% Label axes
xlabel( 'Strain [%]' );
ylabel( 'Stress [MPa]' );
grid on
% saveas(f,[Data.Name(1:end-3),'jpeg'])

end

